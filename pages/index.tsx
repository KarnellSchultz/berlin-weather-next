import React, { useEffect, useState } from "react";
import Head from "next/head";
import Image from "next/image";
import { useQuery } from "react-query";
import { getWeather } from "../lib/service";

import { useLocalStorage } from "../hooks/useLocalStorage";

const API_KEY = process.env.API_KEY;

// const BASE_URL = `http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}`;

// const fetchWeather = async (cityName) => {
//   const resp = await fetch(
//     `http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${process.env.API_KEY}`
//   );
//   if (!resp.ok) {
//     throw new Error("Network response was not ok");
//   }
//   const data = await resp.json();
//   return data;
// };

type HomeProps = {
  API_KEY?: string;
};

export default function Home({ API_KEY }: HomeProps) {
  const [userInput, setUserInput] = useState<string>("");
  const [displayedWeather, setDisplayedWeather] = useLocalStorage<string>(
    "displayedWeather",
    "berlin"
  );

  const {
    isLoading,
    isError,
    data: cityData,
    refetch,
    isFetching,
  } = useQuery(["citiesList"], () =>
    fetch(`/api/cities?city=${userInput}`).then((d) => d.json())
  );

  const { data: weatherData, refetch: refetchWeather } = useQuery(
    ["weather", displayedWeather],
    () => getWeather(displayedWeather, API_KEY)
  );

  React.useEffect(() => {
    refetchWeather();
  }, [displayedWeather]);

  if (isLoading) {
    return <span>Loading...</span>;
  }

  if (isError) {
    return <span>Error: {error.message}</span>;
  }

  return (
    <div className="p-4 grid grid-cols-2 gap-4">
      <Head>
        <title>Weather Finder</title>
        <meta
          name="An app to find out the weather around the planet"
          content="Generated by Karnell"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="h-screen bg-gray-50 flex flex-col">
        <h2>Weather Report</h2>
        <form
          onSubmit={(e) => {
            e.preventDefault();
            refetch();
          }}
        >
          <input
            type="text"
            className="p-2 border-2 rounded-md shadow-sm mb-2"
            onChange={(e) => setUserInput(e.target.value)}
            value={userInput}
          />
          <button
            className="bg-indigo-400 hover:bg-indigo-300
          active:bg-indigo-500 p-2 shadow-sm rounded-md mb-2
          "
            type="button"
            onClick={() => refetch()}
          >
            Search
          </button>
        </form>
        {isFetching && (
          <div className="lds-ripple">
            <div></div>
            <div></div>
          </div>
        )}

        <ul className="grid gap-4">
          {cityData &&
            cityData.citiesList.map((el) => (
              <li
                key={el.id}
                className="
                grid grid-cols-2 gap-8 p-4 items-center
              bg-gray-200 rounded-md"
                onClick={() => setDisplayedWeather(el.name)}
              >
                <div>
                  <div>{el.name}</div>
                  <div>{el.country}</div>
                </div>
                {/* <div>{el.weather[0].main}</div> */}
                <button
                  className="p-3 bg-indigo-400 hover:bg-indigo-300
                focus:bg-indigo-500 focus:text-white
                  rounded-md"
                  onClick={() => setDisplayedWeather(el.name)}
                >
                  Click
                </button>
              </li>
            ))}
        </ul>
      </div>
      <section className="flex flex-col flex-auto">
        <h3>Weather info central!</h3>
        {weatherData && (
          <div className="bg-indigo-200 rounded-md p-3">
            <ul className="grid grid-cols-2">
              <li>{weatherData.name}</li>
              <li>{weatherData.country}</li>
              <li>{weatherData.timezone}</li>
              <li>{weatherData.main.humidity}</li>
              <li>{weatherData.weather[0].main}</li>
            </ul>
            <img
              src={`https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`}
              alt={`${weatherData.weather[0].description}`}
            />
          </div>
        )}
      </section>
    </div>
  );
}

export async function getStaticProps() {
  return {
    props: {
      API_KEY: process.env.API_KEY,
    },
  };
}
